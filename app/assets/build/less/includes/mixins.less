/**
 Mixin: .font-face
 Quickly declare a font face
*/
.font(@font-name, @font-file, @font-weight: normal, @font-style: normal) {
    font-family: @font-name;

    src: url(~"@{font-folder}/@{font-file}-webfont.eot");
    src: url(~"@{font-folder}/@{font-file}-webfont.eot?#iefix") format("embedded-opentype"),
         url(~"@{font-folder}/@{font-file}-webfont.woff") format("woff"),
         url(~"@{font-folder}/@{font-file}-webfont.ttf") format("truetype"),
         url(~"@{font-folder}/@{font-file}-webfont.svg#@{font-name}") format("svg");

    font-weight: @font-weight;
    font-style: @font-style;
}

/**
 Mixin: .gradient
 A simpler syntax for gradients
*/
.gradient(@start: white, @end: black) {
	#gradient > .vertical(@start, @end);
}

/**
 Mixin: .pinstripe
 Print a pinstripe gradient
*/
.pinstripe(@background-color, @stripe-color, @angle: -45deg, @stripe-offset: 2%) {
    background-color: @background-color;
    background-image: -webkit-linear-gradient(-45deg, transparent, transparent 50%-@stripe-offset, @stripe-color 50%-@stripe-offset, @stripe-color 50%+@stripe-offset, transparent 50%+@stripe-offset, transparent);
    background-image: -moz-linear-gradient(-45deg, transparent, transparent 50%-@stripe-offset, @stripe-color 50%-@stripe-offset, @stripe-color 50%+@stripe-offset, transparent 50%+@stripe-offset, transparent);
    background-image: -ms-linear-gradient(-45deg, transparent, transparent 50%-@stripe-offset, @stripe-color 50%-@stripe-offset, @stripe-color 50%+@stripe-offset, transparent 50%+@stripe-offset, transparent);
    background-image: -o-linear-gradient(-45deg, transparent, transparent 50%-@stripe-offset, @stripe-color 50%-@stripe-offset, @stripe-color 50%+@stripe-offset, transparent 50%+@stripe-offset, transparent);
    background-image: linear-gradient(-45deg, transparent, transparent 50%-@stripe-offset, @stripe-color 50%-@stripe-offset, @stripe-color 50%+@stripe-offset, transparent 50%+@stripe-offset, transparent);
}

/**
 Mixin: .shadow
 A simpler syntax for shadow with defaults
*/
.shadow(@distance: 0.1rem, @spread: 0.1rem, @weight: 0.25) {
    .box-shadow(@distance @distance @spread rgba(0, 0, 0, @weight));
}

/**
 Mixin: .ellipsis
 Truncate overflowed text using ellipsis: ...
*/
.ellipsis() {
    // display: inline-block; // Works without in Chrome
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

/**
 Mixin: .scrollable
 Make an area scrollable when the contents overflow

 Note: Does not work for flexbox children in Chrome
*/
.scrollable() {
    overflow-y: auto;
    -webkit-overflow-scrolling: touch; // Enable iOS-style scrolling
    min-height: 1px; // Enable scrolling in flexbox children in Firefox
}

/**
 Mixin: .spin
 Rotate an element forever
*/
.spin(@time: 1s) {
    -webkit-transition-property: -webkit-transform;
    -webkit-transition-duration: @time;

    -moz-transition-property: -moz-transform;
    -moz-transition-duration: @time;

    -webkit-animation-name: rotate;
    -webkit-animation-duration: @time;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: linear;

    -moz-animation-name: rotate;
    -moz-animation-duration: @time;
    -moz-animation-iteration-count: infinite;
    -moz-animation-timing-function: linear;
}

.spin-cc(@time: 1s) {
    -webkit-transition-property: -webkit-transform;
    -webkit-transition-duration: @time;

    -moz-transition-property: -moz-transform;
    -moz-transition-duration: @time;

    -webkit-animation-name: rotate-cc;
    -webkit-animation-duration: @time;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: linear;

    -moz-animation-name: rotate-cc;
    -moz-animation-duration: @time;
    -moz-animation-iteration-count: infinite;
    -moz-animation-timing-function: linear;
}

.accelerate() {
  -webkit-transform: translate3d(0, 0, 0);
}

/**
 Mixin: .background-size
 Set the scaling of the background image or gradient
*/
.background-size(@width, @height) { 
    -webkit-background-size: @width @height;
    -moz-background-size: @width @height;
    background-size: @width @height;
}
.background-size(@size) { 
    .background-size(@size, @size);
}

/**
 Mixin: .glow
 Make an element glow
 TODO: add partial glow mixin for mixed top/bottom/left/right only
*/
.glow(@radius: @focus-glow-radius, @glowColor: @focus-glow-color, @borderColor: @focus-border-color, @borderWidth: @px) {
    outline: none;
    .box-shadow(0 0 @radius @glowColor);
    border: @borderWidth solid @borderColor;
}

/**
 Mixin: .glow-text
 Make text or a font icon glow
*/
.glow-text(@radius: 0.357rem, @glowColor: @focus-glow-color, @textColor: @focus-border-color) {
    color: darken(@textColor, 35%);
    text-shadow: 0 0 @radius @glowColor;
}

/**
 Mixin: .no-glow
 Make an element glow
 TODO: add partial glow mixin for mixed top/bottom/left/right only
*/
.no-glow() {
    border: none;
    outline: none;
    .box-shadow(0 0 0 transparent);
    text-shadow: none;
}

/**
 Mixin: .no-select
 Stop text selection for an element and its children
*/
.no-select() {
    -webkit-touch-callout: none;
    .user-select(none);
}

/**
 Mixin: .placeholder
 Input field placeholder font color
*/
.placeholder(@color) {
    input::-webkit-input-placeholder { color: @color; }
    input:-moz-placeholder { color: @color; }
    textarea::-webkit-input-placeholder { color: @color; }
    textarea:-moz-placeholder { color: @color; }
}

/**
 Mixin: .box-sizing
 Set an element as a border box
*/
.border-box {
    .box-sizing(border-box);
}

/**
 Mixin: .calc-width
 Sets the width with a calc() expression
*/
.calc-width(@expression) {
    width: -webkit-calc(@expression);
    width: -moz-calc(@expression);
    width: -o-calc(@expression);
    width: calc(@expression);
}
.calc-width(@expression, @fallback) {
    width: @fallback;
    .calc-width(@expression);
}

/*
  Mixin: .font-size
  Turn any button into a square button. For use with the .icon-* mixins or classes.
*/

/*
  Mixin: .button-square
  Turn any button into a square button. For use with the .icon-* mixins or classes.
*/
.button-square() {
  min-width: 0; // Reset min-width on buttons
  
  width: 2rem;
  height: 2rem;
  margin: 0;
  padding: 0;
  
  .gradient(@dropdown-gradient-start-color, @dropdown-gradient-end-color);
  
  border: @px solid @dropdown-border-color;
    
  line-height: 2rem - @px; // Align icons vertically
  text-shadow: none; // TODO: use white shadow?

  vertical-align: top; // Don't behave like an icon
  
  &:hover {
    border: @px solid @dropdown-border-color; // Override icon class border resets
    
    .gradient(@dropdown-gradient-start-color, @dropdown-gradient-start-color);
  }

  &:active {
    border: @px solid @dropdown-border-color; // Override icon class border resets

    .gradient(@dropdown-gradient-end-color, @dropdown-gradient-end-color);
    
    .box-shadow(inset 0 0 0.5rem rgba(0, 0, 0, 0.25));
    
    // Don't change colors when clicked if using a CSS class for an icon
    &:before {
      color: @icon-color;
      opacity: @icon-opacity;
    }
  }
  
  &:disabled {
    border: @px solid @button-disabled-border-color; // Override icon class border resets

    background: @button-disabled-background-color;
    .box-shadow(none);

    cursor: default;
  }
}

.iosTapHoldPreventDefault() {
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
}
