/**
  Element: form
  No margin or padding by default
*/
form {
  margin: 0;
  padding: 0;
}

/**
  disable tab highlight for *all* elements
  the rational for disabling the style for all *a* element rather then selectively
  is that as each 'widget' provides its own highlight state, 
  tap-highlight seems to be rather redundant.

  Althought it would be cleaner to add the style for each widget, this proved to be rather laborious process and 
  would have to be done for all non-CoralUI widget (e.g. the CQ components).

  NOTE: disabling for 'a' elements works BUT is not perfect.
  For example, 'touching' free space while displaying quickactions, still produces an ugly flash.
*/

* {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}

/**
  Element: img
  Bootstrap's reset needs to be massaged a bit for images
*/
img {
  max-width: none; // Otherwise, images can get squished in funny ways when base size increases
}

/**
  Classes: .left .right
  Basic float left/right classes
*/
.left {
  float: left;
}
.right {
  float: right;
}

/*
  Class: clear
  Clear floats before and after an element
*/
.clear {
  clear: both;
}


/**
  Class: .hidden
  Hide element from visual browsers as well as from accessibility, but without affecting its width/height dimensions (can be measured while hidden).
  Known Limitation:
    If you need to access the element's dimensions, don't place it inside a focusable element, or it will lose it's dimensions while focused.
    This means inside <a> or <button> elements, or draggable elements.
*/
.hidden {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  visibility: hidden;
}
:focus .hidden {
  // Workaround for the focus rectangle in Webkit
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: 1px;
}

/**
  Class: .hidden-accessible
  Hide element from visual browsers, but still keep it accessible (useful to add accessibility to visual elements).
*/
.hidden-accessible {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  // Workaround for the focus rectangle in Webkit
  overflow: hidden;
  width: 1px !important;
  height: 1px !important;
  margin: 0 -1px -1px 0 !important;
}

/**
  Class: .grayText or .greyText
  Used for secondary or help text
*/
.greyText,
.grayText {
  color: @font-secondary-color;
}

/**
  Class: .smallText
  Used for smaller text
*/
.smallText {
  font-size: 0.8rem;
}


/**
  Class: .lightText
  Used for light text
*/
.lightText {
  font-family: AdobeCleanLight;
  font-weight: lighter;
}

/**
  Class: .regularText
  Used for regular text (as a reset)
*/
.regularText {
  font-family: AdobeClean;
  font-weight: normal;
}


/**
  Class: .close
  Used for close buttons with an &times; entity inside of them
*/
button.close {
  margin: 0;
  padding: 0;
  min-width: 0;

  border: none !important;
  background: none !important;
  .box-shadow(none);

  color: black;
  font-size: @close-font-size;
  font-weight: bold;
  text-decoration: none !important; // override for anchor
  text-shadow: none;
  line-height: 0.55;

  cursor: pointer;

  .opacity(@close-opacity);

  &:active {
    .box-shadow(none); // override button
  }

  &:hover,
  &:focus {
    .box-shadow(none); // override button
    .opacity(85);
  }
}
